val String filename = "heizung-modus.rules"

// vordefinierte Temperaturen
val Number tempHigh = 23.0
val Number tempComfort = 21.0
val Number tempMid = 19.0
val Number tempLower = 17.0
val Number tempChill = 15.0
val Number tempAway = 15.0
val Number tempAwayLonger = 13.0
val Number tempOff = 4.5

//  Heizmodi für die ganze Wohnung:
//  NORMAL: Betriebsmodus für die normale Arbeitswoche
//  HOMEOFFICE: Folgt Normal
//  PARTY: Konstante Beheizung, automatischer Wechsel zu NORMAL in der Nacht (nach der Party oder dem besonderen Tag)
//  SICKDAY: Wärmere Beheizung für den laufenden Tag (Krank zuhause)
//  WEEKEND_TRIP: leicht abgesenkte Temperatur über das Wochenende, automatischer Wechsel zu NORMAL am nächsten Montag morgen
//  AWAY: Unterwegs/längere Zeit abwesend, abgesenkte Temperatur für einen undefinierten Zeitraum
//  OFF_SUMMER: alle Heizkörper sind aus (Sommerbetrieb)
//  CALENDAR: einzelne Kalender Termine überschreiben das aktuelle Zeitprogramm
//  AUTO_DEVICE: Wechselt Gerät in automatik Modus, keine automatische Beeinflussung
//  MANU_DEVICE: Wechselt Gerät in manuellen Modus, keine automatische Beeinflussung

rule "System started"
when
    System started
then
    createTimer(now.plusSeconds(180)) [ |
        logInfo(filename, "Whg_Heating system started")
        if (Whg_Heating_Mode.state == NULL) Whg_Heating_Mode.postUpdate("NORMAL")
        Heating_TargetPresets.members.filter[item | item.state == NULL].forEach[item | item.postUpdate(tempMid)]
        Whg_Heating_UpdateHeater.sendCommand(ON)
    ]
end

rule "Heizmodus umschalten und Stellglieder setzen"
when
    Item Whg_Heating_Mode received update or
    Item Whg_Heating_UpdateHeater received command ON
then
    Whg_Heating_UpdateHeater.postUpdate(OFF)
    logInfo(filename, "Wohnung Heizmodus: " + Whg_Heating_Mode.state)
    switch Whg_Heating_Mode.state {
        case "NORMAL" : {
            WZ_Heizung_Manu.sendCommand(WZ_Heizung_PresetTemp.state as Number)
        }
        case "HOMEOFFICE" : {
            WZ_Heizung_Manu.sendCommand(WZ_Heizung_PresetTemp.state as Number)
        }
        case "PARTY" : {
            WZ_Heizung_Manu.sendCommand(tempComfort)
        }
        case "SICKDAY" : {
            WZ_Heizung_Manu.sendCommand(tempHigh)
        }
        case "WEEKEND_TRIP" : {
            WZ_Heizung_Manu.sendCommand(tempAway)
        }
        case "AWAY" : {
            WZ_Heizung_Manu.sendCommand(tempAwayLonger)
        }
        case "OFF_SUMMER" : {
            WZ_Heizung_Manu.sendCommand(tempOff)
        }
        case "CALENDAR"    : { logWarn(filename, "Wohnung Heizmodus: CALENDAR (nicht implementiert)") }
        case "AUTO_DEVICE" : { logWarn(filename, "Wohnung Heizmodus: AUTO_DEVICE (nicht implementiert)") }
        case "MANU_DEVICE" : { logWarn(filename, "Wohnung Heizmodus: MANU_DEVICE (nicht implementiert)") }
        default            : { logError(filename, "Wohnung Heizmodus ungültig: " + Whg_Heating_Mode.state) }
    }
end